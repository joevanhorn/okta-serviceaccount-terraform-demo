# GitHub Actions Workflow for Terraform Okta Management
# .github/workflows/terraform-okta.yml

name: Terraform Okta Management

on:
  # Trigger on pull requests to main
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-okta.yml'
  
  # Trigger on pushes to main
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-okta.yml'
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

# Prevent concurrent runs
concurrency:
  group: terraform-okta-${{ github.ref }}
  cancel-in-progress: false

env:
  TERRAFORM_VERSION: '1.6.0'
  WORKING_DIRECTORY: './terraform'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    # Run on PRs or manual plan
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ${{ env.WORKING_DIRECTORY }}
        continue-on-error: true
      
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          OKTA_ORG_NAME: ${{ secrets.OKTA_ORG_NAME }}
          OKTA_BASE_URL: ${{ secrets.OKTA_BASE_URL }}
          OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out=tfplan \
            -var="okta_org_name=${{ secrets.OKTA_ORG_NAME }}" \
            -var="okta_base_url=${{ secrets.OKTA_BASE_URL }}" \
            -var="okta_api_token=${{ secrets.OKTA_API_TOKEN }}"
        working-directory: ${{ env.WORKING_DIRECTORY }}
        continue-on-error: true
      
      - name: Save Plan
        if: steps.plan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: ${{ env.WORKING_DIRECTORY }}/tfplan
          retention-days: 5
      
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    # Only run on push to main or manual apply
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    
    environment:
      name: production
    
    permissions:
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          OKTA_ORG_NAME: ${{ secrets.OKTA_ORG_NAME }}
          OKTA_BASE_URL: ${{ secrets.OKTA_BASE_URL }}
          OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}
      
      - name: Terraform Apply
        run: |
          terraform apply -auto-approve -input=false \
            -var="okta_org_name=${{ secrets.OKTA_ORG_NAME }}" \
            -var="okta_base_url=${{ secrets.OKTA_BASE_URL }}" \
            -var="okta_api_token=${{ secrets.OKTA_API_TOKEN }}"
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Terraform Output
        id: output
        run: terraform output -json
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Create Summary
        run: |
          echo "### Terraform Apply Completed Successfully ‚úÖ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Outputs:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.output.outputs.stdout }}' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    # Only run on manual destroy
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    environment:
      name: production-destroy
    
    permissions:
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          OKTA_ORG_NAME: ${{ secrets.OKTA_ORG_NAME }}
          OKTA_BASE_URL: ${{ secrets.OKTA_BASE_URL }}
          OKTA_API_TOKEN: ${{ secrets.OKTA_API_TOKEN }}
      
      - name: Terraform Destroy
        run: |
          terraform destroy -auto-approve -input=false \
            -var="okta_org_name=${{ secrets.OKTA_ORG_NAME }}" \
            -var="okta_base_url=${{ secrets.OKTA_BASE_URL }}" \
            -var="okta_api_token=${{ secrets.OKTA_API_TOKEN }}"
        working-directory: ${{ env.WORKING_DIRECTORY }}
      
      - name: Create Summary
        run: |
          echo "### Terraform Destroy Completed ‚ö†Ô∏è" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**All Okta resources have been destroyed**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
